package day14

import (
	"bufio"
	"os"
	"strconv"
	"strings"
)

//Generated by AoC helper tool ðŸŽ„
//In order to get started, extend main.go so it discovers and runs this file as well

type Day14Solver struct{}

type coordinate struct {
	x int
	y int
}

type robot struct {
	position coordinate
	velocity coordinate
}

func moveRobots(robots []robot, mapWidth int, mapHeight int) {
	for i := 0; i < len(robots); i++ {
		newX := (robots[i].position.x + robots[i].velocity.x) % mapWidth
		newY := (robots[i].position.y + robots[i].velocity.y) % mapHeight

		if newX < 0 {
			newX = mapWidth + newX
		}

		if newY < 0 {
			newY = mapHeight + newY
		}

		robots[i].position.x = newX
		robots[i].position.y = newY
	}
}

func printMap(robots []robot, mapWidth int, mapHeight int, iter int) {
	f, _ := os.Create("./robots/xmap_" + strconv.Itoa(iter) + ".txt")
	defer f.Close()

	for y := 0; y < mapHeight; y++ {
		for x := 0; x < mapWidth; x++ {
			robotCount := 0
			for i := 0; i < len(robots); i++ {
				if robots[i].position.x == x && robots[i].position.y == y {
					robotCount++
				}
			}
			if robotCount > 0 {
				f.WriteString(strconv.Itoa(robotCount))
			} else {
				f.WriteString(".")
			}
		}
		f.WriteString("\n")
	}

	f.Sync()
}

func countQuadrants(robots []robot, mapWidth int, mapHeight int) int {
	quadrants := make([]int, 4)

	for i := 0; i < len(robots); i++ {
		if robots[i].position.x < mapWidth/2 && robots[i].position.y < mapHeight/2 {
			quadrants[0]++
		} else if robots[i].position.x > mapWidth/2 && robots[i].position.y < mapHeight/2 {
			quadrants[1]++
		} else if robots[i].position.x < mapWidth/2 && robots[i].position.y > mapHeight/2 {
			quadrants[2]++
		} else if robots[i].position.x > mapWidth/2 && robots[i].position.y > mapHeight/2 {
			quadrants[3]++
		}
	}

	agg := 1
	for i := 0; i < len(quadrants); i++ {
		agg *= quadrants[i]
	}

	return agg
}

func (d Day14Solver) Solve(filename string, answerChan chan int, doneChan chan bool, errorChan chan error) {
	defer close(answerChan)
	defer close(errorChan)
	file, err := os.Open(filename)

	if err != nil {
		errorChan <- err
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)

	robots := []robot{}

	for scanner.Scan() {
		line := scanner.Text()
		split := strings.Split(line, " ")
		posSplit := strings.Split(split[0][2:], ",")
		velSplit := strings.Split(split[1][2:], ",")

		posx, _ := strconv.Atoi(posSplit[0])
		posy, _ := strconv.Atoi(posSplit[1])

		velx, _ := strconv.Atoi(velSplit[0])
		vely, _ := strconv.Atoi(velSplit[1])

		position := coordinate{x: posx, y: posy}
		velocity := coordinate{x: velx, y: vely}

		robot := robot{position: position, velocity: velocity}
		robots = append(robots, robot)
	}

	mapWidth := 101
	mapHeight := 103

	for i := 1; i <= 6500; i++ {
		moveRobots(robots, mapWidth, mapHeight)
		printMap(robots, mapWidth, mapHeight, i)
	}

	res1 := countQuadrants(robots, mapWidth, mapHeight)

	answerChan <- res1
	answerChan <- 0

	doneChan <- true
}
