package day11

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

//Generated by AoC helper tool ðŸŽ„
//In order to get started, extend main.go so it discovers and runs this file as well

type Day11Solver struct{}

func applyRules(st int) []int {
	if st == 0 {
		return []int{1}
	}

	str := strconv.Itoa(st)
	if len(str)%2 == 0 {
		firstHalf := str[:len(str)/2]
		secondHalf := str[len(str)/2:]
		fNum, _ := strconv.Atoi(firstHalf)
		sNum, _ := strconv.Atoi(secondHalf)
		return []int{fNum, sNum}
	}

	return []int{st * 2024}
}

func step(nums map[int]int, tokens map[int][]int) map[int]int {
	newNums := make(map[int]int)

	for n, count := range nums {
		if _, exists := tokens[n]; !exists {
			tokens[n] = applyRules(n)
		}
		for _, k := range tokens[n] {
			newNums[k] += count
		}
	}
	return newNums
}

func loopStones(stones map[int]int, blinks int) int {
	uniqueStones := stones
	tokens := make(map[int][]int)

	for i := 0; i < blinks; i++ {
		uniqueStones = step(uniqueStones, tokens)
	}

	agg := 0
	for _, n := range uniqueStones {
		agg += n
	}

	return agg
}

func (d Day11Solver) Solve(filename string, answerChan chan int, doneChan chan bool, errorChan chan error) {
	defer close(answerChan)
	defer close(errorChan)
	file, err := os.Open(filename)

	if err != nil {
		errorChan <- err
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)

	stones := make(map[int]int)

	for scanner.Scan() {
		line := scanner.Text()
		for _, char := range strings.Split(line, " ") {
			num, _ := strconv.Atoi(string(char))
			stones[num]++
		}
	}
	fmt.Println(stones)

	res1 := loopStones(stones, 25)

	res2 := loopStones(stones, 75)

	answerChan <- res1
	answerChan <- res2

	doneChan <- true
}
