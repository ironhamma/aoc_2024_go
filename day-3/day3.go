package day3

import (
	"bufio"
	"fmt"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"
)

//Generated by AoC helper tool ðŸŽ„
//In order to get started, extend main.go so it discovers and runs this file as well

type Day3Solver struct{}

func (d Day3Solver) Solve(filename string, answerChan chan int, doneChan chan bool, errorChan chan error) {
	defer close(answerChan)
	defer close(errorChan)
	file, err := os.Open(filename)

	if err != nil {
		errorChan <- err
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)

	add := 0

	pattern := `mul\((\d+),(\d+)\)`
	re := regexp.MustCompile(pattern)

	lines := []string{}

	for scanner.Scan() {
		line := scanner.Text()
		lines = append(lines, line)
		matches := re.FindAllStringSubmatch(line, -1)

		for _, match := range matches {
			n1, err1 := strconv.ParseInt(match[1], 10, 64)
			n2, err2 := strconv.ParseInt(match[2], 10, 64)
			if err1 != nil || err2 != nil {
				errorChan <- fmt.Errorf("failed to parse numbers: %v, %v", match[1], match[2])
				continue
			}
			num1 := int(n1)
			num2 := int(n2)
			add += (num1 * num2)
		}
	}

	answerChan <- add
	add = 0

	pattern2 := `mul\(\d+,\d+\)|do\(\)|don't\(\)`
	re2 := regexp.MustCompile(pattern2)

	enabled := true
	for _, line := range lines {
		matches := re2.FindAllStringSubmatch(line, -1)

		for _, match := range matches {
			if match[0] == "do()" {
				enabled = true
				continue
			}
			if match[0] == "don't()" {
				enabled = false
				continue
			}

			if strings.HasPrefix(match[0], "mul(") {
				submatches := re.FindStringSubmatch(match[0])
				if len(submatches) >= 3 {
					n1, err1 := strconv.ParseInt(submatches[1], 10, 64)
					n2, err2 := strconv.ParseInt(submatches[2], 10, 64)
					if err1 != nil || err2 != nil {
						errorChan <- fmt.Errorf("failed to parse numbers: %v, %v", submatches[1], submatches[2])
						continue
					}
					num1 := int(n1)
					num2 := int(n2)
					if enabled {
						add += (num1 * num2)
					}
				}
			}
		}
	}

	answerChan <- add

	time.Sleep(time.Second)
	doneChan <- true
}
