package day12

import (
	"bufio"
	"os"
	"strings"
)

//Generated by AoC helper tool ðŸŽ„
//In order to get started, extend main.go so it discovers and runs this file as well

type Day12Solver struct{}

func countFences(grid [][]string) [][]int {
	rows := len(grid)
	cols := len(grid[0])
	visited := make([][]bool, rows)
	for i := range visited {
		visited[i] = make([]bool, cols)
	}

	directions := [][]int{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}
	totalFences := 0

	var dfs func(x, y int) int
	areaCount := 0
	dfs = func(x, y int) int {
		visited[x][y] = true
		fences := 0
		areaCount++

		for _, dir := range directions {
			nx, ny := x+dir[0], y+dir[1]

			if nx < 0 || ny < 0 || nx >= rows || ny >= cols || grid[nx][ny] != grid[x][y] {
				fences++
			} else if !visited[nx][ny] {
				fences += dfs(nx, ny)
			}
		}
		return fences
	}

	nums := [][]int{}

	for i := 0; i < rows; i++ {
		for j := 0; j < cols; j++ {
			if !visited[i][j] {
				areaCount = 0
				currCount := dfs(i, j)
				nums = append(nums, []int{areaCount, currCount})
				totalFences += currCount
			}
		}
	}

	return nums
}

func (d Day12Solver) Solve(filename string, answerChan chan int, doneChan chan bool, errorChan chan error) {
	defer close(answerChan)
	defer close(errorChan)
	file, err := os.Open(filename)

	if err != nil {
		errorChan <- err
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)

	chars := [][]string{}

	for scanner.Scan() {
		line := scanner.Text()
		chars = append(chars, strings.Split(line, ""))
	}

	fencePerimArea := countFences(chars)

	agg := 0
	for _, n := range fencePerimArea {
		agg += n[0] * n[1]
	}

	answerChan <- agg
	answerChan <- 0

	doneChan <- true
}
