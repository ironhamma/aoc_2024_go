package day8

import (
	"bufio"
	"os"
	"strings"
)

//Generated by AoC helper tool ðŸŽ„
//In order to get started, extend main.go so it discovers and runs this file as well

type Day8Solver struct{}

type coordinate struct {
	x int
	y int
}

func findAntinodes(width, height int, towers map[string][]coordinate) map[coordinate]bool {
	antinodes := make(map[coordinate]bool)

	for _, values := range towers {
		for i := 0; i < len(values)-1; i++ {
			for j := i + 1; j < len(values); j++ {
				distX := values[j].x - values[i].x
				distY := values[j].y - values[i].y

				antiNode1 := coordinate{x: values[i].x - distX, y: values[i].y - distY}
				antiNode2 := coordinate{x: values[j].x + distX, y: values[j].y + distY}

				if antiNode1.x < width && antiNode1.x >= 0 && antiNode1.y < height && antiNode1.y >= 0 {
					antinodes[antiNode1] = true
				}
				if antiNode2.x < width && antiNode2.x >= 0 && antiNode2.y < width && antiNode2.y >= 0 {
					antinodes[antiNode2] = true
				}
			}
		}
	}

	return antinodes
}

func (d Day8Solver) Solve(filename string, answerChan chan int, doneChan chan bool, errorChan chan error) {
	defer close(answerChan)
	defer close(errorChan)
	file, err := os.Open(filename)

	if err != nil {
		errorChan <- err
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)

	antennas := make(map[string][]coordinate)

	y := 0
	width := 0
	for scanner.Scan() {
		line := strings.Split(scanner.Text(), "")

		for x, char := range line {
			if x > width {
				width = x
			}
			if char == "." {
				continue
			}
			antennas[char] = append(antennas[char], coordinate{
				x: x,
				y: y,
			})
		}

		y++
	}

	antiNodes := findAntinodes(width+1, y+1, antennas)

	answerChan <- len(antiNodes)
	answerChan <- 0

	doneChan <- true
}
