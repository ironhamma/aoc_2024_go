package day4

import (
	"bufio"
	"os"
	"strings"
	"time"
)

//Generated by AoC helper tool ðŸŽ„
//In order to get started, extend main.go so it discovers and runs this file as well

type Day4Solver struct{}

func countHorizontal(text [][]string) int {
	count := 0

	for i := 0; i < len(text); i++ {
		for j := 0; j < len(text[i])-3; j++ {
			if text[i][j] == "X" && text[i][j+1] == "M" && text[i][j+2] == "A" && text[i][j+3] == "S" {
				count++
			}
		}
	}

	return count
}

func countVertical(text [][]string) int {
	count := 0

	for i := 0; i < len(text)-3; i++ {
		for j := 0; j < len(text[i]); j++ {
			if text[i][j] == "X" && text[i+1][j] == "M" && text[i+2][j] == "A" && text[i+3][j] == "S" {
				count++
			}
		}
	}

	return count
}

func countDiagonal(text [][]string) int {
	count := 0

	for i := 0; i < len(text)-3; i++ {
		for j := 0; j < len(text[i])-3; j++ {
			if text[i][j] == "X" && text[i+1][j+1] == "M" && text[i+2][j+2] == "A" && text[i+3][j+3] == "S" {
				count++
			}
		}
	}

	for i := 0; i < len(text)-3; i++ {
		for j := 3; j < len(text[i]); j++ {
			if text[i][j] == "X" && text[i+1][j-1] == "M" && text[i+2][j-2] == "A" && text[i+3][j-3] == "S" {
				count++
			}
		}
	}

	return count
}

func flipHorizontal(text [][]string) [][]string {
	flipped := [][]string{}

	for i := 0; i < len(text); i++ {
		row := []string{}

		for j := len(text[i]) - 1; j >= 0; j-- {
			row = append(row, text[i][j])
		}

		flipped = append(flipped, row)
	}

	return flipped
}

func flipVertical(text [][]string) [][]string {
	flipped := [][]string{}

	for i := len(text) - 1; i >= 0; i-- {
		flipped = append(flipped, text[i])
	}

	return flipped
}

func countXMAS(text [][]string) int {
	count := 0

	for i := 0; i < len(text)-2; i++ {
		for j := 0; j < len(text[i])-2; j++ {
			if text[i][j] == "M" && text[i+1][j+1] == "A" && text[i+2][j] == "M" && text[i][j+2] == "S" && text[i+2][j+2] == "S" {
				count++
			}

			if text[i][j] == "M" && text[i+1][j+1] == "A" && text[i+2][j] == "S" && text[i][j+2] == "M" && text[i+2][j+2] == "S" {
				count++
			}

			if text[i][j] == "S" && text[i+1][j+1] == "A" && text[i+2][j] == "S" && text[i][j+2] == "M" && text[i+2][j+2] == "M" {
				count++
			}

			if text[i][j] == "S" && text[i+1][j+1] == "A" && text[i+2][j] == "M" && text[i][j+2] == "S" && text[i+2][j+2] == "M" {
				count++
			}
		}
	}

	return count
}

func (d Day4Solver) Solve(filename string, answerChan chan int, doneChan chan bool, errorChan chan error) {
	defer close(answerChan)
	defer close(errorChan)
	file, err := os.Open(filename)

	if err != nil {
		errorChan <- err
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)

	text := [][]string{}

	for scanner.Scan() {
		line := scanner.Text()
		chars := strings.Split(line, "")

		text = append(text, chars)
	}

	count := 0

	count += countHorizontal(text)
	count += countVertical(text)
	count += countDiagonal(text)

	text2 := flipHorizontal(text)
	count += countHorizontal(text2)

	text3 := flipVertical(text)
	count += countVertical(text3)
	count += countDiagonal(text3)

	count2 := countXMAS(text)

	answerChan <- count
	answerChan <- count2

	time.Sleep(time.Second)
	doneChan <- true
}
